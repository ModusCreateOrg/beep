import '../../stencil.core';
import { EventEmitter } from '../../stencil.core';
import { ComponentProps, Config, FrameworkDelegate, Mode, NavComponent, NavOptions, NavOutlet, QueueController, RouteID, RouteWrite, RouterIntent, TransitionDoneFn } from '../../interface';
import { ViewController } from './view-controller';
export declare class Nav implements NavOutlet {
    private transInstr;
    private sbTrns?;
    private useRouter;
    private isTransitioning;
    private destroyed;
    private views;
    mode: Mode;
    el: HTMLElement;
    queue: QueueController;
    config: Config;
    win: Window;
    animationCtrl: HTMLIonAnimationControllerElement;
    swipeBackEnabled?: boolean;
    animated?: boolean;
    delegate?: FrameworkDelegate;
    rootParams?: ComponentProps;
    root?: NavComponent;
    rootChanged(): void;
    ionNavWillLoad: EventEmitter<void>;
    ionNavWillChange: EventEmitter<void>;
    ionNavDidChange: EventEmitter<void>;
    componentWillLoad(): void;
    componentDidLoad(): void;
    componentDidUnload(): void;
    push(component: NavComponent, componentProps?: ComponentProps | null, opts?: NavOptions | null, done?: TransitionDoneFn): Promise<boolean>;
    insert(insertIndex: number, component: NavComponent, componentProps?: ComponentProps | null, opts?: NavOptions | null, done?: TransitionDoneFn): Promise<boolean>;
    insertPages(insertIndex: number, insertComponents: NavComponent[], opts?: NavOptions | null, done?: TransitionDoneFn): Promise<boolean>;
    pop(opts?: NavOptions | null, done?: TransitionDoneFn): Promise<boolean>;
    popTo(indexOrViewCtrl: number | ViewController, opts?: NavOptions | null, done?: TransitionDoneFn): Promise<boolean>;
    popToRoot(opts?: NavOptions | null, done?: TransitionDoneFn): Promise<boolean>;
    removeIndex(startIndex: number, removeCount?: number, opts?: NavOptions | null, done?: TransitionDoneFn): Promise<boolean>;
    setRoot(component: NavComponent, componentProps?: ComponentProps | null, opts?: NavOptions | null, done?: TransitionDoneFn): Promise<boolean>;
    setPages(views: any[], opts?: NavOptions | null, done?: TransitionDoneFn): Promise<boolean>;
    setRouteId(id: string, params: any, direction: RouterIntent): Promise<RouteWrite>;
    getRouteId(): RouteID | undefined;
    canGoBack(view?: ViewController | undefined): boolean;
    getActive(): ViewController | undefined;
    getByIndex(index: number): ViewController | undefined;
    getPrevious(view?: ViewController | undefined): ViewController | undefined;
    length(): number;
    private queueTrns(ti, done);
    private success(result, ti);
    private failed(rejectReason, ti);
    private fireError(rejectReason, ti);
    private nextTrns();
    private runTransition(ti);
    private prepareTI(ti);
    private getEnteringView(ti, leavingView);
    private postViewInit(enteringView, leavingView, ti);
    private transition(enteringView, leavingView, ti);
    private transitionFinish(transition, enteringView, leavingView, opts);
    private insertViewAt(view, index);
    private removeView(view);
    private destroyView(view);
    /**
     * DOM WRITE
     */
    private cleanup(activeView);
    private swipeBackStart();
    private swipeBackProgress(detail);
    private swipeBackEnd(detail);
    private canSwipeBack();
    render(): (JSX.Element | undefined)[];
}
